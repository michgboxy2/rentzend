{"version":3,"sources":["queries/me.js","components/home.js","components/kyc.js","components/formikField/index.js","components/signUp.js","components/signIn.js","App.js","serviceWorker.js","index.js"],"names":["gql","graphql","loggedOnUser","props","token","sessionStorage","getItem","data","me","loading","error","refetch","history","push","name","email","phoneNumber","address","useStyles","makeStyles","theme","root","margin","spacing","input","display","mutation","useState","files","setFiles","classes","onsubmit","e","a","mutate","variables","file","singleUpload","filename","alert","errors","message","className","accept","id","multiple","type","onChange","target","htmlFor","Button","variant","color","component","onClick","FormikField","label","required","autoComplete","as","TextField","fullWidth","helperText","removeItem","initialValues","password","zipCode","signupSchema","yup","shape","positive","integer","handleSubmit","setItem","signUp","verified","onSubmit","validationSchema","dirty","isValid","disabled","signInSchema","signIn","console","log","App","exact","path","SignUp","Kyc","Home","Component","Boolean","window","location","hostname","match","httpLink","createUploadLink","uri","authLink","setContext","_","headers","cache","InMemoryCache","dataIdFromObject","o","client","ApolloClient","link","concat","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.ec6f6788.chunk.js","sourcesContent":["import gql from 'graphql-tag';\n\nexport default gql`\n    {\n        me{\n            name\n            email\n            phoneNumber\n            zipCode\n            address\n          }\n    }\n`;","import React from 'react';\nimport {graphql} from 'react-apollo';\nimport loggedOnUser from '../queries/me';\n\n\n\n  \n  \n\nconst Home = (props) => {\n   \n   let token = sessionStorage.getItem('token');\n\n   const {loading, error, me} = props.data;\n\n   props.data.refetch();\n\n\n   if(!token){ props.history.push('/login')}\n\n    if(me){\n        return (\n            <div>\n                <h3>Welcome to RentZend</h3> <h2>{me.name}</h2>\n    \n                <p>Email: {me.email}</p>\n                <p>PhoneNumber: {me.phoneNumber}</p>\n                <p>Address: {me.address}</p>\n    \n                \n            </div>\n        )\n    }else {\n        return <div>Welcome to RentZend</div>\n    }\n}\n\n\n\nexport default graphql(loggedOnUser)(Home);\n\n","import React, {useState} from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Button from '@material-ui/core/Button';\nimport gql from 'graphql-tag';\nimport {graphql} from 'react-apollo';\n\nconst useStyles = makeStyles(theme => ({\n    root: {\n      '& > *': {\n        margin: theme.spacing(1),\n      },\n    },\n    input: {\n      display: 'none',\n    },\n  }));\n\n  \n  \nconst Kyc = (props) => {\n    let token = sessionStorage.getItem('token');\n    if(!token){ props.history.push('/login')}\n\n\n    const [files, setFiles] = useState({});\n\n\n\n    const classes = useStyles();\n\n    onsubmit = async (e) => {\n        try{\n         let data = await props.mutate({\n            variables: {file : files}\n        });\n\n        if(data.data.singleUpload.filename){\n            alert(\"upload successful\");\n            props.history.push('/home');\n\n        }\n\n        if(data.errors){\n            alert(data.errors[0].message);\n        }\n\n        }catch(e){\n            alert(\"file upload failed\")\n        }\n    }\n    \n    return (\n        <div className={classes.root}>\n          <input\n            accept=\"image/*\"\n            className={classes.input}\n            id=\"contained-button-file\"\n            multiple\n            type=\"file\"\n            onChange={(e) => {setFiles(e.target.files[0])}}\n          />\n          <p>{files.name}</p>\n          <label htmlFor=\"contained-button-file\">\n            <Button variant=\"contained\" color=\"primary\" component=\"span\">\n              SELECT FILE\n            </Button>\n          </label>\n\n          <button variant=\"contained\" color=\"primary\" type=\"submit\" onClick={onsubmit}>Upload </button>\n        </div>\n      );\n}\n\nconst mutation = gql`\n    mutation($file : Upload! ){\n        singleUpload(file: $file){\n      filename\n      mimetype\n      encoding\n    }\n  }\n\n`;\n\n\nexport default graphql(mutation)(Kyc);","import React from 'react';\nimport {ErrorMessage, Field} from 'formik';\nimport { makeStyles } from '@material-ui/core/styles';\nimport TextField from '@material-ui/core/TextField';\n\nimport \"./formikField.css\";\n\nconst FormikField = ({name, label, type = \"text\"}) => {\n    return (\n        <div className=\"FormikField\">\n        <Field\n            required\n            autoComplete=\"off\" \n            as={TextField}\n            label={label}\n            name={name}\n            fullWidth\n            type={type}\n            helperText={<ErrorMessage name={name}/>}\n        />\n       </div>\n    )\n}\n\nexport default FormikField;","import React, {useState} from 'react';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport * as yup from 'yup';\nimport Button from \"@material-ui/core/Button\";\nimport gql from 'graphql-tag';\nimport {graphql} from 'react-apollo';\n\nimport FormikField from './formikField'; \n\nsessionStorage.removeItem('token');\n\nconst initialValues= {\n    name: '', \n    email: '', \n    address: '', \n    password: '',\n    zipCode: '',\n    phoneNumber: '', \n}\n\nconst signupSchema = yup.object().shape({\n    name: yup.string().required(),\n    phoneNumber: yup\n      .number('only numbers are allowed')\n      .required('required')\n      .positive()\n      .integer(),\n    email: yup.string().email('enter email'),\n    address: yup.string().required(),\n    zipCode: yup\n      .number()\n      .required()\n      .positive()\n      .integer(),\n    password: yup.string().required()\n\n  });\n  \n  \n\nconst Signup = (props) => {\n    const handleSubmit = async ({name, email, phoneNumber, address, zipCode, password}) => {\n        try{\n            let data = await props.mutate({\n                variables: {name, email, phoneNumber, address, zipCode, password}\n            });\n    \n            sessionStorage.setItem(\"token\", (data.data.signUp.token));\n    \n            if(data){\n                if(data.data.signUp.verified === 'false'){\n                    props.history.push('/kyc')\n                }else {\n                    props.history.push('/home')\n                }\n            }\n\n        }catch(e){\n            alert(\"Agent registration failed\")\n        }\n    };\n\n\n    return (\n        <div>\n            <h1>Signup</h1>\n            <Formik\n                initialValues={initialValues}\n                onSubmit={handleSubmit}\n                validationSchema={signupSchema}\n                >\n                {({dirty, isValid}) => {\n                    return (\n                        <Form>\n                           \n                            <FormikField label=\"Name\" name=\"name\"/>\n\n                            <FormikField label=\"Email\" name=\"email\"/>\n\n                            <FormikField label=\"Address\" name=\"address\"/>\n\n                            <FormikField label=\"Phone Number\" name=\"phoneNumber\"/>\n\n                            <FormikField label=\"Zip Code\" name=\"zipCode\"/>\n\n                            <FormikField label=\"password\" name=\"password\" type=\"password\"/>\n\n                        \n\n                            {/* <button disabled={!dirty} type=\"submit\">submit</button> */}\n                             <Button variant=\"contained\" color=\"primary\" disabled={!dirty} type=\"submit\">Register </Button>\n\n                        </Form>\n                    )\n                }}\n            </Formik>\n        </div>\n    )\n}\n\nconst mutation = gql`\n        mutation SignUp($email : String!, $password : String!, $name: String!,$zipCode : String!, $address : String!, $phoneNumber: String!){\n                signUp(name: $name, email: $email, password: $password, phoneNumber: $phoneNumber, address: $address, zipCode: $zipCode){\n                   token\n                   verified\n                  }\n        }\n`;\n\nexport default graphql(mutation)(Signup);\n// graphql(mutation)(Signup);\n","import React, {useState} from 'react';\nimport {Formik, Form, Field, ErrorMessage} from 'formik';\nimport * as yup from 'yup';\nimport Button from \"@material-ui/core/Button\";\nimport gql from 'graphql-tag';\nimport {graphql} from 'react-apollo';\n\nimport FormikField from './formikField'; \n\nsessionStorage.removeItem('token');\n\nconst initialValues= {\n    name: '', \n    email: '', \n    address: '', \n    password: '',\n    zipCode: '',\n    phoneNumber: '', \n}\n\nconst signInSchema = yup.object().shape({\n    email: yup.string().email('enter email'),\n    password: yup.string().required()\n\n  });\n  \n  \n\nconst Signin = (props) => {\n    const handleSubmit = async ({name, email, phoneNumber, address, zipCode, password}) => {\n        \n       try{\n        let data = await props.mutate({\n            variables: {name, email, phoneNumber, address, zipCode, password}\n        });\n\n        sessionStorage.setItem(\"token\", (data.data.signIn.token));\n\n        if(data){\n            if(data.data.signIn.verified === 'false'){\n                props.history.push('/kyc')\n            }else {\n                props.history.push('/home')\n            }\n        }\n       }catch(e){\n           console.log(e);\n           alert('Incorrect credentials');\n       }\n    };\n\n\n    return (\n        <div>\n            <h1>Agent Signin</h1>\n            <Formik\n                initialValues={initialValues}\n                onSubmit={handleSubmit}\n                validationSchema={signInSchema}\n                >\n                {({dirty, isValid}) => {\n                    return (\n                        <Form>\n                            <FormikField label=\"Email\" name=\"email\"/>\n\n                            <FormikField label=\"password\" name=\"password\" type=\"password\"/>\n                            \n                             <Button variant=\"contained\" color=\"primary\" disabled={!dirty} type=\"submit\">Login </Button>\n\n                        </Form>\n                    )\n                }}\n            </Formik>\n        </div>\n    )\n}\n\nconst mutation = gql`\n        mutation SignUp($email : String!, $password : String!){\n                signIn(email: $email, password: $password){\n                   token\n                   verified\n                  }\n        }\n`;\n\n\nexport default graphql(mutation)(Signin);\n\n","import React, {Component} from 'react';\nimport {Route, HashRouter} from 'react-router-dom';\nimport './App.css';\n\nimport Home from './components/home';\nimport Kyc from './components/kyc';\nimport SignUp from './components/signUp';\nimport signIn from './components/signIn';\n\n\n\nclass App extends Component {\n    render(){\n        return (\n            <HashRouter>\n                <div className=\"App\">\n                   <Route exact path=\"/\" component={SignUp}/>\n                   <Route exact path=\"/login\" component={signIn}/>\n                   <Route exact path=\"/kyc\" component={Kyc}/>\n                   <Route exact path=\"/home\" component={Home}/>\n\n                </div>\n            </HashRouter>\n        )\n    }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport ApolloClient from 'apollo-client';\nimport {createHttpLink} from 'apollo-link-http';\nimport { setContext } from 'apollo-link-context'\nimport {InMemoryCache} from 'apollo-cache-inmemory';\nimport { createUploadLink } from 'apollo-upload-client'\nimport {ApolloProvider} from 'react-apollo';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'typeface-roboto';\nimport './index.css';\n\nconst url = 'http://127.0.0.1:5000/graphql';\n\nconst httpLink = createUploadLink({\n    uri: url,\n});\n\nconst authLink = setContext((_, { headers }) => {\n  // get the authentication token from local storage if it exists\n  const token = sessionStorage.getItem('token');\n  // return the headers to the context so httpLink can read them\n  return {\n    headers: {\n      ...headers,\n      \"x-token\": token ? `${token}` : \"\",\n    }\n  }\n});\n\nconsole.log(sessionStorage.getItem('token'));\n\n\nconst cache = new InMemoryCache({\n  dataIdFromObject: o => o.id //identify a piece of data for refetching. tracks records fetched from the server \n\n});\n\nconst client = new ApolloClient({\n    link: authLink.concat(httpLink),\n    cache,\n    headers: {\n        \"x-token\": sessionStorage.getItem('token'),\n      },\n\t\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n        <App />\n  </ApolloProvider>,\n    document.getElementById('root'));\n\nserviceWorker.unregister();\n\n\n"],"sourceRoot":""}